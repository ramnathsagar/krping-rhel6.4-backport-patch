diff --git a/krping.c b/krping.c
index ac31023..d4aa27a 100644
--- a/krping.c
+++ b/krping.c
@@ -45,9 +45,8 @@
 #include <linux/device.h>
 #include <linux/pci.h>
 #include <linux/time.h>
-#include <linux/random.h>
 #include <linux/sched.h>
-#include <linux/proc_fs.h>
+#include <asm/system.h>
 
 #include <asm/atomic.h>
 #include <asm/pci.h>
@@ -546,7 +545,7 @@ static void krping_setup_wr(struct krping_cb *cb)
 	case MW:
 		cb->bind_attr.wr_id = 0xabbaabba;
 		cb->bind_attr.send_flags = 0; /* unsignaled */
-		cb->bind_attr.bind_info.length = cb->size;
+		cb->bind_attr.length = cb->size;
 		break;
 	default:
 		break;
@@ -648,7 +647,7 @@ static int krping_setup_buffers(struct krping_cb *cb)
 				cb->page_list, cb->page_list_len);
 			break;
 		case MW:
-			cb->mw = ib_alloc_mw(cb->pd, 1);
+			cb->mw = ib_alloc_mw(cb->pd);
 			if (IS_ERR(cb->mw)) {
 				DEBUG_LOG(PFX "recv_buf alloc_mw failed\n");
 				ret = PTR_ERR(cb->mw);
@@ -917,15 +916,15 @@ static u32 krping_rdma_rkey(struct krping_cb *cb, u64 buf, int post_inv)
 		 * Update the MW with new buf info.
 		 */
 		if (buf == (u64)cb->start_dma_addr) {
-			cb->bind_attr.bind_info.mw_access_flags = IB_ACCESS_REMOTE_READ;
-			cb->bind_attr.bind_info.mr = cb->start_mr;
+			cb->bind_attr.mw_access_flags = IB_ACCESS_REMOTE_READ;
+			cb->bind_attr.mr = cb->start_mr;
 		} else {
-			cb->bind_attr.bind_info.mw_access_flags = IB_ACCESS_REMOTE_WRITE;
-			cb->bind_attr.bind_info.mr = cb->rdma_mr;
+			cb->bind_attr.mw_access_flags = IB_ACCESS_REMOTE_WRITE;
+			cb->bind_attr.mr = cb->rdma_mr;
 		}
-		cb->bind_attr.bind_info.addr = buf;
+		cb->bind_attr.addr = buf;
 		DEBUG_LOG(PFX "binding mw rkey 0x%x to buf %llx mr rkey 0x%x\n",
-			cb->mw->rkey, buf, cb->bind_attr.bind_info.mr->rkey);
+			cb->mw->rkey, buf, cb->bind_attr.mr->rkey);
 		ret = ib_bind_mw(cb->qp, cb->mw, &cb->bind_attr);
 		if (ret) {
 			printk(KERN_ERR PFX "bind mw error %d\n", ret);
@@ -1981,7 +1980,7 @@ static void krping_fr_test(struct krping_cb *cb)
 			ib_update_fast_reg_key(mr, ++key);
 			fr.wr.fast_reg.rkey = mr->rkey;
 			inv.ex.invalidate_rkey = mr->rkey;
-			size = prandom_u32() % cb->size;
+			size = random32() % cb->size;
 			if (size == 0)
 				size = cb->size;
 			plen = (((size - 1) & PAGE_MASK) + PAGE_SIZE) >> PAGE_SHIFT;
@@ -2411,20 +2410,16 @@ static int krping_write_proc(struct file *file, const char *buffer,
 		return (int) count;
 }
 
-struct file_operations krping_ops = {
-	.owner = THIS_MODULE,
-	.read = krping_read_proc,
-	.write = krping_write_proc
-};
-
 static int __init krping_init(void)
 {
 	DEBUG_LOG("krping_init\n");
-	krping_proc = proc_create("krping", 0666, NULL, &krping_ops);
+	krping_proc = create_proc_entry("krping", 0666, NULL);
 	if (krping_proc == NULL) {
 		printk(KERN_ERR PFX "cannot create /proc/krping\n");
 		return -ENOMEM;
 	}
+	krping_proc->read_proc = krping_read_proc;
+	krping_proc->write_proc = krping_write_proc;
 	return 0;
 }
 
